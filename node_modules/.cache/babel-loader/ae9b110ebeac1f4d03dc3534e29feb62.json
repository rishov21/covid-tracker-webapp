{"ast":null,"code":"var _jsxFileName = \"D:\\\\Xampp\\\\htdocs\\\\Covid-tracker-india\\\\src\\\\components\\\\TimelineChart.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport const data = {\n  Legend: {\n    display: true,\n    position: 'top',\n    labels: {\n      fontColor: '#000',\n      text: 'Total Confirmed'\n    }\n  },\n  labels,\n  datasets: [{\n    label: 'Active',\n    data: [0, 19, 15, 20, 30, 40, 40, 50, 40, 30, 20, 10],\n    borderColor: 'rgb(255, 99, 132)',\n    backgroundColor: 'rgba(255, 99, 132, 0.5)'\n  }, {\n    label: 'Recovered',\n    data: [101, 202, 303, 404, 505, 606, 207, 107, 507, 707, 435],\n    borderColor: 'rgb(28, 177, 66)',\n    backgroundColor: 'rgba(28, 177, 66, 0.5)'\n  }, {\n    label: 'Dead',\n    data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n    borderColor: 'rgb(53, 162, 235)',\n    backgroundColor: 'rgba(53, 162, 235, 0.5)'\n  }]\n};\nexport default function TimelineChart() {\n  _s();\n\n  const [result, setresult] = useState([]);\n  const [total, settotal] = useState([]);\n\n  const getdata = async () => {\n    const response = await axios.get(`https://data.covid19india.org/v4/min/timeseries.min.json`).catch(error => console.log(error));\n    setresult(response.data);\n  };\n\n  useEffect(() => {\n    getdata(); // getTotal();\n  }, []);\n\n  const getTotal = () => {\n    let totalCases = 0;\n    let totalDeaths = 0;\n    let totalRecovered = 0;\n    const dateinfo = [];\n\n    for (const states in result) {\n      for (const dates in result[states]) {\n        for (const cases in result[states][dates]) {\n          totalCases = result[states][dates][cases].total.confirmed;\n          totalDeaths = result[states][dates][cases].total.deceased;\n          totalRecovered = result[states][dates][cases].total.recovered;\n          let temp = {\n            totalCase: totalCases,\n            totalDeath: totalDeaths,\n            totalRecovered: totalRecovered\n          };\n          dateinfo.push(temp); // console.log(result[states][dates][cases].total);\n        } //storing data for each dates\n\n      }\n    }\n\n    settotal(dateinfo);\n  };\n\n  console.log(total);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center\",\n      children: \"Timeseries\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TimelineChart, \"ZAxGt5XwYCXRy+K5MAvhPAds0Sw=\");\n\n_c = TimelineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimelineChart\");","map":{"version":3,"sources":["D:/Xampp/htdocs/Covid-tracker-india/src/components/TimelineChart.js"],"names":["React","axios","useEffect","useState","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","register","labels","data","display","position","fontColor","text","datasets","label","borderColor","backgroundColor","TimelineChart","result","setresult","total","settotal","getdata","response","get","catch","error","console","log","getTotal","totalCases","totalDeaths","totalRecovered","dateinfo","states","dates","cases","confirmed","deceased","recovered","temp","totalCase","totalDeath","push"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\n import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, } from 'chart.js'; \r\n import { Line } from 'react-chartjs-2';\r\n ChartJS.register( CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend );\r\n \r\n  \r\n  const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n  \r\n  export const data = {\r\n    Legend:{\r\n      display:true,\r\n      position:'top',\r\n      labels:{\r\n        fontColor:'#000',\r\n        text:'Total Confirmed'\r\n      }\r\n    },\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: 'Active',\r\n        data: [0, 19, 15, 20, 30, 40, 40, 50, 40, 30, 20, 10],\r\n        borderColor: 'rgb(255, 99, 132)',\r\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n      },\r\n      {\r\n        label: 'Recovered',\r\n        data: [ 101, 202, 303, 404, 505, 606, 207,107,507,707,435 ],\r\n        borderColor: 'rgb(28, 177, 66)',\r\n        backgroundColor: 'rgba(28, 177, 66, 0.5)',\r\n      },\r\n      {\r\n        label: 'Dead',\r\n        data: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ],\r\n        borderColor: 'rgb(53, 162, 235)',\r\n        backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n      }\r\n    ],\r\n  };\r\n  \r\n\r\nexport default function TimelineChart() {\r\n      const [result, setresult] = useState([]);\r\n      const [total, settotal] = useState([]);\r\n\r\n    const getdata = async () => {\r\n      const response = await axios\r\n        .get(`https://data.covid19india.org/v4/min/timeseries.min.json`)\r\n        .catch((error) => console.log(error));\r\n      setresult(response.data);\r\n      };\r\n    useEffect(() => {\r\n      getdata();\r\n      // getTotal();\r\n    }, []);\r\n\r\n\r\n\r\n    const getTotal= ()=>{\r\n          let totalCases=0;\r\n          let totalDeaths=0;\r\n          let totalRecovered=0;\r\n          const dateinfo=[]\r\n          for(const states in result ){\r\n              for(const dates in result[states]){\r\n                  for(const cases in result[states][dates]){\r\n                      totalCases=result[states][dates][cases].total.confirmed;\r\n                      totalDeaths=result[states][dates][cases].total.deceased;\r\n                      totalRecovered=result[states][dates][cases].total.recovered;\r\n                      let temp={totalCase:totalCases,totalDeath:totalDeaths,totalRecovered:totalRecovered};\r\n                      dateinfo.push(temp);\r\n                      // console.log(result[states][dates][cases].total);\r\n                  }\r\n                  //storing data for each dates\r\n                  \r\n              }\r\n          }\r\n          settotal(dateinfo);\r\n         \r\n    }\r\n\r\n    console.log(total);\r\n  \r\n    return (\r\n        <>\r\n          <p className='text-center'>Timeseries</p>\r\n          {/* <button onClick={getTotal}>getdadta</button> */}\r\n            <Line data={data} />\r\n        </>\r\n    )\r\n}\r\n  \r\n"]},"metadata":{},"sourceType":"module"}